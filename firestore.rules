rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ─── Helper Functions ─────────────────────────────
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data.role == 'admin';
    }

    function isValidTransaction() {
      let data = request.resource.data;
      return data.keys().hasAll(['amount', 'type', 'category', 'date', 'notes']) &&
             (data.type == 'income' || data.type == 'expense') &&
             data.amount is number && data.amount > 0 &&
             data.date is timestamp;
    }

    // ─── Users Collection ─────────────────────────────
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());

      // ─── Transactions Subcollection ───────────────
      match /transactions/{transactionId} {
        allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
        allow create, update: if isAuthenticated() && (isOwner(userId) || isAdmin()) && isValidTransaction();
        allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
      }

      // ─── Budgets Subcollection ────────────────────
      match /budgets/{monthId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // ─── Contact Messages ────────────────────────────
    match /contact_messages/{messageId} {
      allow create: if request.resource.data.keys().hasAll(['name', 'email', 'message', 'timestamp']) &&
                    request.resource.data.name is string &&
                    request.resource.data.email is string &&
                    request.resource.data.message is string &&
                    request.resource.data.timestamp is timestamp;
      allow read, delete: if isAuthenticated() && isAdmin();
    }

    // ─── Messages ────────────────────────────────────
    match /messages/{messageId} {
      allow read: if request.auth != null;
      
      allow update: if request.auth != null &&
        // Allow sender to edit/delete their own message
        resource.data.userId == request.auth.uid ||
        // Allow recipient to mark as read if they didn't send the message
        (!('userId' in request.resource.data) || request.resource.data.userId == resource.data.userId) &&
        request.resource.data.keys().hasOnly(['read']);
    }

    // ─── Typing Status ───────────────────────────────
    match /typing/{typingId} {
      allow read: if isAuthenticated();
      allow create, delete: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }

    // ─── Online Status ───────────────────────────────
    match /status/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }

    // ─── Analysis History ────────────────────────────
    match /analysisHistory/{documentId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll([
          'userId', 'imageUrl', 'prediction', 'confidence',
          'classProbabilities', 'recommendations', 'createdAt'
        ]) &&
        request.resource.data.userId is string &&
        request.resource.data.imageUrl is string &&
        request.resource.data.prediction is string &&
        request.resource.data.confidence is number &&
        request.resource.data.classProbabilities is map &&
        request.resource.data.recommendations is list &&
        request.resource.data.createdAt is timestamp;
      allow update, delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }

    // ─── Attachments ─────────────────────────────────
    match /attachments/{attachmentId} {
      allow read: if isAuthenticated();
      allow create, delete: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }

    // ─── Feedback ────────────────────────────────────
   match /feedback/{feedbackId} {
  allow read: if isAuthenticated() && (
    resource.data.userId == request.auth.uid || isAdmin()
  );
  allow delete: if isAuthenticated() && isAdmin();
  allow create: if isAuthenticated() &&
    request.resource.data.keys().hasAll(['type', 'message', 'userId', 'timestamp']) &&
    request.resource.data.type in ['suggestion', 'bug', 'question', 'other'] &&
    request.resource.data.message.size() > 0 &&
    request.resource.data.userId == request.auth.uid &&
    request.resource.data.timestamp is timestamp;
}



    // ─── System Logs ─────────────────────────────────
    match /system_logs/{logId} {
  allow read: if isAuthenticated() && resource.data.user == request.auth.token.email;
  allow create: if isAuthenticated() &&
    request.resource.data.keys().hasAll(['type', 'message', 'timestamp', 'user', 'userRole']) &&
    request.resource.data.type in ['info', 'warning', 'error', 'success'] &&
    request.resource.data.message.size() > 0 &&
    request.resource.data.timestamp is timestamp &&
    request.resource.data.user.size() > 0 &&
    request.resource.data.userRole in ['admin', 'user'];
  allow delete: if isAuthenticated() && isAdmin();
}


    // ─── System Config (Admin only) ──────────────────
    match /system/{document=**} {
      allow read, write: if isAuthenticated() && isAdmin();
    }

    // ─── Public Data ─────────────────────────────────
    match /public/{document=**} {
      allow read: if true;
      allow write: if isAuthenticated() && isAdmin();
    }

    // ─── IoT Sensor Data ─────────────────────────────
    match /sensor_data/{deviceId} {
      allow read, write: if isAuthenticated();
    }
    
    // ─── Tawk Logs ───────────────────────────────────
    match /tawkLogs/{docId} {
      allow create: if isAuthenticated() &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['user', 'admin']; // Allow both 'user' and 'admin' roles
    }

  }
}
